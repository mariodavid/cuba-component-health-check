
buildscript {
    ext.cubaVersion = '6.7.13'
    repositories {
        maven {
            url 'https://repo.cuba-platform.com/content/groups/work'
            credentials {
                username(rootProject.hasProperty('repoUser') ? rootProject['repoUser'] : 'cuba')
                password(rootProject.hasProperty('repoPass') ? rootProject['repoPass'] : 'cuba123')
            }
        }

    }
    dependencies {
        classpath "com.haulmont.gradle:cuba-plugin:$cubaVersion"

        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.0"

        classpath 'net.saliman:gradle-cobertura-plugin:2.5.0'
    }
}

def globalModule = project(':health-check-global')
def webThemesModule= project(':health-check-web-themes')
def coreModule = project(':health-check-core')
def guiModule = project(':health-check-gui')
def webModule = project(':health-check-web')

def servletApi = 'org.apache.tomcat:tomcat-servlet-api:8.0.26'


apply(plugin: 'idea')
apply(plugin: 'cuba')

cuba {
    artifact {
        group = 'de.diedavids.cuba.healthcheck'
        version = '0.3.0'
        isSnapshot = true
    }
    tomcat {
        dir = "$project.rootDir/deploy/tomcat"
    }

    ide {
         
        vcs = 'Git'
    }
}


subprojects {
    apply plugin: 'com.jfrog.bintray'

    bintray {
        user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('UPLOAD_REPOSITORY_USERNAME')
        key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('UPLOAD_REPOSITORY_PASSWORD')

        configurations = ['archives']

        publish = true

        override = false

        // metadata
        pkg {
            repo = 'cuba-components'
            name = 'cuba-component-health-check'
            desc = 'CUBA platform application component for data import'
            userOrg = 'mariodavid'

            websiteUrl = 'https://github.com/mariodavid/cuba-component-health-check'
            issueTrackerUrl = 'https://github.com/mariodavid/cuba-component-health-check/issues'
            vcsUrl = 'https://github.com/mariodavid/cuba-component-health-check.git'

            licenses = ["Apache-2.0"]

            labels = ['health-check', 'cuba-patform', 'cuba-component']
            githubRepo = 'mariodavid/cuba-component-health-check'
            githubReleaseNotesFile = 'CHANGELOG.md'

            version {
                name = "${cuba.artifact.version}"
                desc = ''
                released = new Date()
                vcsTag = "${cuba.artifact.version}"
            }
        }
    }
}


dependencies {
    appComponent("com.haulmont.cuba:cuba-global:$cubaVersion")
}


def hsql = 'org.hsqldb:hsqldb:2.2.9'

allprojects {
    apply plugin: 'net.saliman.cobertura'
}


def files = subprojects
        .findAll{ !it.name.toLowerCase().contains('theme') }
        .collect { new File(it.projectDir, '/build/cobertura/cobertura.ser')}
def sourceDirs = subprojects
        .findAll{ !it.name.toLowerCase().contains('theme') }
        .collect { new File(it.projectDir, '/src')}

cobertura {
    coverageFormats = ['html', 'xml']
    coverageMergeDatafiles = files
    coverageCheckTotalBranchRate = 0
    coverageCheckTotalLineRate = 0
    coverageCheckHaltOnFailure = true
    coverageSourceDirs = sourceDirs
//    coverageCheckLineRate = 1
    coverageCheckRegexes = [[regex: '.*\\$.*', branchRate: 0, lineRate: 0]]

}


test.dependsOn(subprojects.collect{ ":${it.name}:test"} )
test.finalizedBy(project.tasks.cobertura)
test.finalizedBy(project.tasks.coberturaCheck)



configure([globalModule, coreModule, guiModule, webModule]) {
    apply(plugin: 'java')
    apply(plugin: 'maven')
    apply(plugin: 'idea')
    apply(plugin: 'cuba')

    dependencies {
        testCompile('junit:junit:4.12')


        testCompile('org.spockframework:spock-core:1.0-groovy-2.4')
        testCompile('org.springframework:spring-test:4.3.1.RELEASE')
        testRuntime "cglib:cglib-nodep:3.2.4"

    }

    task sourceJar(type: Jar) {
        from file('src')
        classifier = 'sources'
    }

    artifacts {
        archives sourceJar
    }
}

configure([globalModule, coreModule, guiModule, webModule]) {
    apply(plugin: 'groovy')
    apply plugin: 'net.saliman.cobertura'
    apply plugin: 'codenarc'

    codenarc {
        toolVersion = "0.24"
        ignoreFailures = false
        reportFormat = 'html'
        reportsDir = new File("./build/reports/codenarc")
    }

    codenarcMain {
        configFile = rootProject.file("config/codenarc/rulesMain.groovy")
    }
    codenarcTest {
        configFile = rootProject.file("config/codenarc/rulesTests.groovy")
    }


    cobertura {
        coverageFormats = ['html', 'xml']
        coverageIgnoreTrivial = true
        coverageIgnores = ['org.slf4j.Logger.*']
        coverageReportDir = new File("$buildDir/reports/cobertura")
    }

    test.finalizedBy(project.tasks.cobertura)
    test.finalizedBy(project.tasks.coberturaCheck)

    sourceSets {
        main { groovy { srcDirs = ["src"] } }
        test { groovy { srcDirs = ["test"] } }
    }
}

configure(globalModule) {
    task enhance(type: CubaEnhancing)

    jar {
        manifest {
            attributes('App-Component-Id': cuba.artifact.group)
            attributes('App-Component-Version': cuba.artifact.version + (cuba.artifact.isSnapshot ? '-SNAPSHOT' : ''))
        }
    }

    
}
configure(webThemesModule) {
    apply(plugin: 'java')
    apply(plugin: 'maven')
    apply(plugin: 'cuba')

    appModuleType = 'web-themes'

    buildDir = file('../build/scss-themes')

    sourceSets {
        main {
            java {
                srcDir '.'
            }
            resources {
                srcDir '.'
            }
        }
    }
}


configure(coreModule) {

    configurations {
        jdbc
        dbscripts
    }

    dependencies {
        compile(globalModule)
        provided(servletApi)
        jdbc(hsql)
        testRuntime(hsql)

    }

    task cleanConf(description: 'Cleans up conf directory') {
        doLast {
            def dir = new File(cuba.tomcat.dir, '/conf/health-check-core')
            if (dir.isDirectory()) {
                ant.delete(includeemptydirs: true) {
                    fileset(dir: dir, includes: '**/*', excludes: 'local.app.properties')
                }
            }
        }
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = 'health-check-core'
        appJars('health-check-global', 'health-check-core')
    }


    def hsqlDbName = 'ddchc6'
    def hsqlPort = 9001

    task startDb(description: 'Starts local HSQLDB server', type: CubaHsqlStart) {
        dbPort = hsqlPort
        dbName = hsqlDbName
    }

    task stopDb(description: 'Stops local HSQLDB server', type: CubaHsqlStop) {
        dbPort = hsqlPort
        dbName = hsqlDbName
    }

    task removeDb(description: 'Removes local HSQL database', type: Delete) {
        delete new File("$rootProject.projectDir/data")
    }

    task killDb(description: "Kill local HSQLDB server process running on port $hsqlPort", type: CubaKillProcess) {
        port = hsqlPort
    }

    task createDb(dependsOn: assembleDbScripts, description: 'Creates local database', type: CubaDbCreation) {
        dbms = 'hsql'
        host = 'localhost'
        dbName = 'ddchc5'
        dbUser = 'sa'
        dbPassword = ''
    }

    task updateDb(dependsOn: assembleDbScripts, description: 'Updates local database', type: CubaDbUpdate) {
        dbms = 'hsql'
        host = 'localhost'
        dbName = 'ddchc5'
        dbUser = 'sa'
        dbPassword = ''
    }

    task createTestDb(dependsOn: assembleDbScripts, description: 'Creates local HSQL database', type: CubaDbCreation) {
        dbms = 'hsql'
        host = "localhost:$hsqlPort"
        dbName = hsqlDbName
        dbUser = 'sa'
        dbPassword = ''
        auxiliaryScript = file('test/de/diedavids/cuba/healthcheck/create-db.sql')
    }

}

configure(guiModule) {
    dependencies {
        compile(globalModule)

    }

    task deployConf(type: Copy) {
        from file('src')
        include "de/diedavids/cuba/healthcheck/**"
        into "$cuba.tomcat.dir/conf/health-check"
    }
}

configure(webModule) {
    configurations {
        webcontent
    }

    dependencies {
        provided(servletApi)
        compile(guiModule)

    }
    
    task webArchive(type: Zip) {
        from file("$buildDir/web")
        from file('web')
        classifier = 'web'
    }

    artifacts {
        archives webArchive
    }

    task deployConf(type: Copy) {
        from file('src')
        include "de/diedavids/cuba/healthcheck/**"
        into "$cuba.tomcat.dir/conf/health-check"
    }

    task clearMessagesCache(type: CubaClearMessagesCache) {
        appName = 'health-check'
    }
    deployConf.dependsOn clearMessagesCache

    task cleanConf(description: 'Cleans up conf directory') {
        doLast {
            def dir = new File(cuba.tomcat.dir, '/conf/health-check')
            if (dir.isDirectory()) {
                ant.delete(includeemptydirs: true) {
                    fileset(dir: dir, includes: '**/*', excludes: 'local.app.properties')
                }
            }
        }
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = 'health-check'
        appJars('health-check-global', 'health-check-gui', 'health-check-web')
    }
    task buildScssThemes(type: CubaWebScssThemeCreation)
    task deployThemes(type: CubaDeployThemeTask, dependsOn: buildScssThemes)
    assemble.dependsOn buildScssThemes
}





task undeploy(type: Delete, dependsOn: ':health-check-web:cleanConf') {
    delete("$cuba.tomcat.dir/shared")
    delete("$cuba.tomcat.dir/webapps/health-check-core")
    delete("$cuba.tomcat.dir/webapps/health-check")
}

task restart(dependsOn: ['stop', ':health-check-core:deploy', ':health-check-web:deploy'], description: 'Redeploys applications and restarts local Tomcat') {
    doLast {
        ant.waitfor(maxwait: 6, maxwaitunit: 'second', checkevery: 2, checkeveryunit: 'second') {
            not {
                socket(server: 'localhost', port: '8787')
            }
        }
        start.execute()
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.4'
}

apply from: 'extra.gradle'


clean {
    delete = ['build/libs', 'build/tmp']
}